package commands

import (
	"encoding/json"
	"fmt"
	"os"
	"path/filepath"
	"regexp"
	"strings"

	"github.com/manifoldco/promptui"
)

type Config struct {
	ProjectName string `json:"project_name"`
	Template    string `json:"template"`   // API | CLI | W/ReactJS
	Deployment  string `json:"deployment"` // docker | kubernetes | no-deployment
	Router      string `json:"router"`     // gin | chi
}

var (
	TemplateOptions   = []string{"API", "CLI", "API+CLI", "API+ReactJS", "API+ReactJS+CLI"}
	DeploymentOptions = []string{"Docker", "Kubernetes", "No-Deployment"}
	RouterOptions     = []string{"Gin", "Chi"}
)

// NewProject creates a new project interactively or with provided config
func NewProject(name, template, deployment, router string) error {
	cfg := Config{}

	// Normalize input
	if name != "" {
		cfg.ProjectName = sanitizeName(name)
	}
	if template != "" {
		cfg.Template = strings.ToLower(template)
	}
	if deployment != "" {
		d := strings.ToLower(deployment)
		if d == "nodeployment" {
			d = "no-deployment"
		}
		cfg.Deployment = d
	}
	if router != "" {
		cfg.Router = strings.ToLower(router)
	}

	// Fill missing values interactively
	if cfg.ProjectName == "" {
		p := promptui.Prompt{Label: "Proje adı", Default: "my-project", AllowEdit: true}
		res, err := p.Run()
		if err != nil {
			fmt.Println(red + "İptal edildi." + reset)
			return err
		}
		cfg.ProjectName = sanitizeName(res)
	}

	if !in(cfg.Template, TemplateOptions) {
		choice, err := selectFrom("Şablon (API / CLI / W/ReactJS)", TemplateOptions)
		if err != nil {
			fmt.Println(red + "İptal edildi." + reset)
			return err
		}
		cfg.Template = choice
	}

	if !in(cfg.Deployment, DeploymentOptions) {
		choice, err := selectFrom("Dağıtım (docker/kubernetes/no-deployment)", DeploymentOptions)
		if err != nil {
			fmt.Println(red + "İptal edildi." + reset)
			return err
		}
		cfg.Deployment = choice
	}

	if !in(strings.Title(strings.ToLower(cfg.Router)), RouterOptions) {
		choice, err := selectFrom("Router (Gin/Chi)", RouterOptions)
		if err != nil {
			fmt.Println(red + "İptal edildi." + reset)
			return err
		}
		cfg.Router = strings.ToLower(choice)
	}

	// Display summary
	printSection("Seçimler")
	printKeyVal("Project", cfg.ProjectName)
	printKeyVal("Template", cfg.Template)
	printKeyVal("Deployment", cfg.Deployment)
	printKeyVal("Router", cfg.Router)

	// Write JSON config
	out := "wentconfig.json"
	if err := writeJSON(out, cfg); err != nil {
		fmt.Printf("\n"+red+"Hata:"+reset+" JSON yazılamadı: %v\n", err)
		return err
	}
	abs, _ := filepath.Abs(out)
	printSuccessBox("Kaydedildi: " + abs)

	// Write .env file with router configuration
	if err := writeEnvFile(cfg); err != nil {
		fmt.Printf("\n"+red+"Hata:"+reset+" .env dosyası yazılamadı: %v\n", err)
		return err
	}
	envAbs, _ := filepath.Abs(".env")
	printSuccessBox("Kaydedildi: " + envAbs)
	fmt.Println()

	return nil
}

// Helper functions
func in[T comparable](v T, list []T) bool {
	for _, x := range list {
		if v == x {
			return true
		}
	}
	return false
}

func sanitizeName(s string) string {
	s = strings.TrimSpace(s)
	s = strings.ToLower(s)
	re := regexp.MustCompile(`[^a-z0-9_-]+`)
	s = re.ReplaceAllString(s, "-")
	s = strings.Trim(s, "-_")
	if s == "" {
		return "my-project"
	}
	return s
}

func selectFrom(label string, items []string) (string, error) {
	templates := &promptui.SelectTemplates{
		Active:   "➤ {{ . | cyan }}",
		Inactive: "  {{ . }}",
		Selected: "✔ {{ . | green }} — " + label,
		FuncMap:  promptui.FuncMap,
	}
	p := promptui.Select{
		Label:     label,
		Items:     items,
		Templates: templates,
		Size:      len(items),
	}
	_, res, err := p.Run()
	return res, err
}

func writeJSON(file string, data interface{}) error {
	b, _ := json.MarshalIndent(data, "", "  ")
	return os.WriteFile(file, b, 0644)
}

// writeEnvFile creates a .env file with router configuration
func writeEnvFile(cfg Config) error {
	router := cfg.Router
	if router == "" {
		router = "gin" // Default to gin if not specified
	}

	envContent := fmt.Sprintf("# Generated by WentPlate\n# Router configuration\nROUTER=%s\n", router)
	return os.WriteFile(".env", []byte(envContent), 0644)
}

func printSection(title string) {
	fmt.Println("\n" + blue + "── " + bold + title + reset + blue + " ─────────────────────────────" + reset)
}

func printKeyVal(key, val string) {
	fmt.Printf("%s%-12s%s %s\n", dim, key+":", reset, bold+val+reset)
}

func printSuccessBox(msg string) {
	border := strings.Repeat("─", len(msg)+2)
	fmt.Printf("\n%s┌%s┐%s\n", green, border, reset)
	fmt.Printf("%s│ %s │%s\n", green, msg, reset)
	fmt.Printf("%s└%s┘%s\n", green, border, reset)
}
